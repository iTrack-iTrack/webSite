@layout Loginlayout
@* Excludes main nav bar *@
@page "/"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject Services.UserSessionService SessionService
@inject HttpClient http
@using System.Text.Json;
@inject SmartWatchWeb.Services.userState user


<style>
    body, html {
        height: 100%;
        margin: 0;
    }

    .login-background {
        background: linear-gradient(135deg, #ADD8E6, #2a5298);
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .login-card {
        background-color: white;
        padding: 2.5rem;
        border-radius: 1.5rem;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        width: 100%;
        max-width: 420px;
    }

    .logo-text {
        font-size: 2rem;
        font-weight: 700;
        color: #1e3c72;
        text-align: center;
        margin-bottom: 2rem;
    }

    .form-label {
        font-weight: 500;
    }

    .btn-primary {
        background-color: #1e3c72;
        border-color: #1e3c72;
    }

        .btn-primary:hover {
            background-color: #17305c;
        }
</style>

<div class="login-background">
    <div class="login-card">
        <div class="logo-text">Itrack & Iwatch</div>

        <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (!string.IsNullOrEmpty(loginError))
            {
                <div class="alert alert-danger" role="alert">@loginError</div>
            }

            <div class="mb-3">
                <label for="userid" class="form-label">UserID</label>
                <InputText id="userid" class="form-control" @bind-Value="loginModel.UserId" />
                <ValidationMessage For="@(() => loginModel.UserId)" class="text-danger" />
            </div>

            <div class="mb-4">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                @if (isLoading)
                {
                    <span>
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        Loading...
                    </span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string loginError;

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        loginError = null;

        try
        {
            // Validate user ID is a number
            int.TryParse(loginModel.UserId, out int userId);




            var response = await http.PostAsJsonAsync("http://itrackandi.watch:8082/login", new
            {
                user_id = loginModel.UserId,
                password = loginModel.Password
            });

            var rawResponse = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Login raw response:");
            Console.WriteLine(rawResponse);

            if (response.IsSuccessStatusCode)
            {
                if (!string.IsNullOrEmpty(rawResponse))
                {
                    // The API returns the token as a plain string, possibly with quotes - trim them
                    string cleanedToken = rawResponse.Trim().Trim('"');
                    Console.WriteLine($"Cleaned token: '{cleanedToken}'");

                    // Set the token and user ID into the shared user state service
                    user.SetToken(cleanedToken);
                    user.setID(userId);

                    if (user.userID== 0)
                    {
                        user.SetAdmin(true);
                        Navigation.NavigateTo("/patientsinfo");
                        return;
                    }
                    else{
                        Navigation.NavigateTo($"/home/{loginModel.UserId}");
                        user.SetAdmin(false);
                    }

                    
                }
                else
                {
                    loginError = "Login response did not contain a token.";
                }
            }
            else
            {
                loginError = $"Login failed: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            loginError = "Login failed. Please try again.";
            Console.WriteLine("Login error: " + ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required]
        public string UserId { get; set; }

        [Required]
        public string Password { get; set; }
    }
}

