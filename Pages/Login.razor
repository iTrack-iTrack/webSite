@layout Loginlayout
@page "/"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject UserSessionService SessionService

<style>
    body, html {
        height: 100%;
        margin: 0;
    }

    .login-background {
        background: linear-gradient(135deg, #ADD8E6, #2a5298);
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .login-card {
        background-color: white;
        padding: 2.5rem;
        border-radius: 1.5rem;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        width: 100%;
        max-width: 420px;
    }

    .logo-text {
        font-size: 2rem;
        font-weight: 700;
        color: #1e3c72;
        text-align: center;
        margin-bottom: 2rem;
    }

    .form-label {
        font-weight: 500;
    }

    .btn-primary {
        background-color: #1e3c72;
        border-color: #1e3c72;
    }

        .btn-primary:hover {
            background-color: #17305c;
        }
</style>

<div class="login-background">
    <div class="login-card">
        <div class="logo-text">ITrack & IWatch</div>

        <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (!string.IsNullOrEmpty(loginError))
            {
                <div class="alert alert-danger" role="alert">@loginError</div>
            }

            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                <ValidationMessage For="@(() => loginModel.Username)" class="text-danger" />
            </div>

            <div class="mb-4">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                @if (isLoading)
                {
                    <span>
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        Loading...
                    </span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string loginError;

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        loginError = null;

        await Task.Delay(500); // Simulate backend delay

        const string testUser = "admin";
        const string testPass = "1234";

        const string user1 = "patient1";
        const string password1 = "12345";

        if (loginModel.Username == testUser && loginModel.Password == testPass)
        {
            SessionService.SetUser(testUser);
            Navigation.NavigateTo("/patientsinfo");
        }
        else if (loginModel.Username == user1 && loginModel.Password == password1)
        {
            SessionService.SetUser(user1);
            Navigation.NavigateTo("/home");
        }
        else
        {
            loginError = "Invalid username or password.";
        }

        isLoading = false;
    }

    public class LoginModel
    {
        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }
    }
}
