@layout Loginlayout
@* Excludes main nav bar *@
@page "/"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject Services.userState admin

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-lg rounded p-4" style="min-width: 320px;">
        <h3 class="text-center mb-4">Login</h3>

        <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (!string.IsNullOrEmpty(loginError))
            {
                <div class="alert alert-danger" role="alert">@loginError</div>
            }

            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                <ValidationMessage For="@(() => loginModel.Username)" class="text-danger" />
            </div>

            <div class="mb-4">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span class="sr-only">Loading...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string loginError;

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        loginError = null;

        // Simulate a backend call for testing
        await Task.Delay(500);

        // Hard-coded credentials for testing
        const string testUser = "admin";
        const string testPass = "1234";

        const string user1 = "patient1";
        const string password1 = "12345";

        if (loginModel.Username == testUser && loginModel.Password == testPass)
        {
            // Navigate to patient profile page
            admin.SetAdmin(true);
            Navigation.NavigateTo("/patientsinfo");
        }
        else if (loginModel.Username == user1 && loginModel.Password == password1)
        {
            admin.SetAdmin(false);
            Navigation.NavigateTo("/home");
        }
        else
        {
            loginError = "Invalid username or password.";
        }

        isLoading = false;
    }

    public class LoginModel
    {
        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }
    }
}
