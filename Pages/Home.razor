@page "/home"
@page "/home/{UserId:int}"

@using SmartWatchWeb.Components
@using System.Text.Json
@inject Services.IHealthDataService HealthData
@inject Services.IBpmStreamService BpmStream

@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject Services.userState user

@implements IAsyncDisposable



<PageTitle>SmartWatch Overview</PageTitle>

<!-- Top navigation bar  -->
<div class="flex justify-between items-center px-6 py-4 bg-white shadow">
    <div class="text-xl font-bold text-gray-800">ITrack & IWatch</div>
    <a href="/account" class="profile-icon">
        <i class="fas fa-user"></i>
    </a>
</div>

<div class="p-6 space-y-6">
    <!-- Cards row -->
    <div class="flex w-full gap-4">
        <!-- BPM card -->
        <div class="data-card bpm-card basis-[23%]">
            <div class="card-bg"></div>
            <div class="relative z-10 text-center">
                <div class="text-2xl font-semibold">Live BPM</div>
                <div class="text-4xl text-red-600 font-bold mt-2">@GetCurrentBpmDisplay()</div>
            </div>
        </div>

        <!-- Steps card -->
        <div class="data-card steps-card basis-[23%]">
            <div class="card-bg"></div>
            <div class="relative z-10 text-center">
                <div class="text-2xl font-semibold">Steps</div>
                <div class="text-4xl text-blue-600 font-bold mt-2">@HealthData.Steps</div>
            </div>
        </div>

        <!-- Temp card -->
        <div class="data-card temp-card basis-[24%]">
            <div class="card-bg"></div>
            <div class="relative z-10 text-center">
                <div class="text-2xl font-semibold">Temp</div>
                <div class="text-4xl text-yellow-600 font-bold mt-2">@HealthData.Temp</div>
            </div>
        </div>

        <!-- Oxygen card -->
        <div class="data-card oxygen-card basis-[30%]">
            <div class="card-bg"></div>
            <div class="relative z-10 text-center">
                <div class="text-2xl font-semibold">Oxidation</div>
                <div class="text-4xl text-green-600 font-bold mt-2">@HealthData.Oxidation%</div>
                <canvas id="gaugeCanvas" width="250" height="150" class="mx-auto"></canvas>
            </div>
        </div>
    </div>

    <!-- Charts grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- BPM Line Chart -->
        <div id="LineContainer">
            <BpmChart Config="_lineChartConfig" Data="HealthData.BpmHistory" />
        </div>

        <!-- Steps Bar Chart -->
        <div id="BarContainer">
            <StepsChart Config="_barChartConfig" Data="stepsData" />
        </div>
    </div>

    <!-- Date range selector -->
    <div class="flex items-center gap-4">
        <RadzenDropDown @bind-Value="selectedRange" Data="@ranges" Style="width: 200px;" />

        <button class="rounded-md shadow-md px-4 py-2 bg-white text-black font-semibold border border-gray-300
           transition-transform transition-shadow duration-200
           hover:scale-105 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-gray-400">
            Load
        </button>
    </div>
    @if (selectedRange == "Custom range")
    {
        <div class="flex gap-4 mt-2">
            <RadzenDatePicker @bind-Value="startDate" DateFormat="yyyy-MM-dd" />
            <RadzenDatePicker @bind-Value="endDate" DateFormat="yyyy-MM-dd" />
        </div>
    }
</div>

@code {
    [Parameter]
    public int UserId { get; set; }
    public class HealthDataModel
    {
        public string user_id { get; set; }
        public string date_time { get; set; }
        public int step { get; set; }
        public bool fall { get; set; }
        public float temperature { get; set; }
        public float longitude { get; set; }
        public float latitude { get; set; }
        public int bpm { get; set; }
        public int blood_oxygen { get; set; }
    }

    private List<TimePoint> stepsData = new()
    {
        new TimePoint(new DateTime(2025, 6, 1), 9800),
        new TimePoint(new DateTime(2025, 6, 2), 10200),
        new TimePoint(new DateTime(2025, 6, 3), 8700),
        new TimePoint(new DateTime(2025, 6, 4), 12000)
    };

    // UI State
    private List<string> ranges = new() { "Today", "Last 7 days", "Last 30 days", "Custom range" };
    private string selectedRange = "Today";
    private DateTime startDate = DateTime.Today;
    private DateTime endDate = DateTime.Today;

    // Chart Configs
    private LineConfig _lineChartConfig = Services.ChartService.CreateBpmLineConfig();
    private BarConfig _barChartConfig = Services.ChartService.CreateStepsBarConfig();

    // JS Interop
    private DotNetObjectReference<object>? _objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) 
        {
            _objRef = DotNetObjectReference.Create<object>(this);
            Console.WriteLine($"The token is: {user.token}");


            await BpmStream.StartAsync(_objRef, UserId, user.token);
            await JS.InvokeVoidAsync("createGauge", "gaugeCanvas", HealthData.Oxidation);
        }
    }
    private string GetCurrentBpmDisplay()
    {
        if (!HealthData.BpmHistory.Any())
            return "—";

        var last = HealthData.BpmHistory.Last();
        return last.Y.ToString();
    }

    [JSInvokable]
    public Task OnBpmReceived(string jsonData)
    {
        try
        {
            Console.WriteLine(jsonData);
            var data = JsonSerializer.Deserialize<HealthDataModel>(jsonData);

            HealthData.AddBpmDataPoint(data.bpm);
            HealthData.Steps = data.step;
            HealthData.Oxidation = data.blood_oxygen;
            HealthData.Temp = data.temperature;
            updateGauge(HealthData.Oxidation);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error parsing health data: {ex.Message}");
        }

        return Task.CompletedTask;
    }
    public async void updateGauge(int value)
    {
        await JS.InvokeVoidAsync("updateGauge", value);
    }

    public async ValueTask DisposeAsync()
    {
        await BpmStream.StopAsync();
        _objRef?.Dispose();
    }
}