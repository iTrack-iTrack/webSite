

@page "/"
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Common.Time



<PageTitle>Data Dashboard</PageTitle>

<h1 class="title">Health Statystics</h1>

<div class="data-type-selector">
	<div class="data-card" @onclick="TogglePieChart">Pie Chart Data</div>
	<div class="data-card" @onclick="ToggleBpm" style="display: flex; flex-direction: column; align-items: center;">
		<span>Live BPM</span>
		<i class="fa-solid fa-heart-pulse" style="color: red;"></i>
	</div>
	<div class="data-card" @onclick="ToggleSteps">Other Data</div>
</div>


<!--<button class="btn-Login" @onclick="TogglePieChart">Toggle Pie Chart</button> -->
<!-- <button class="btn-Login" @onclick="ToggleLineChart">Toggle Line Chart</button> -->

<div hidden="@hidePieChart">
	<Chart Config="_pieConfig"></Chart>
</div>
<div hidden="@hideLineChart"
	<Chart Config="_LineChartConfig"></Chart>
</div>

@code {
	private Random rand = new Random();
	private Timer updateTimer;
	private Queue<TimePoint> bpmDataQueue = new Queue<TimePoint>();

	private LineDataset<TimePoint> bpmDataset;
	private LineDataset<TimePoint> stepsDataset;
	private LineDataset<TimePoint> otherDataSet;

	private PieConfig _pieConfig = new PieConfig();
	private LineConfig _LineChartConfig = new LineConfig();

	private bool hidePieChart = true;
	private bool hideLineChart = true;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		ConfigurePieConfig();
		ConfigureLineConfig();
		StartLiveData();
	}
	private void TogglePieChart()
	{
		hidePieChart = false;
		hideLineChart = true;

		StopLiveData();
	}
	private void ToggleBpm()
	{
		hideLineChart = false;
		hidePieChart = true;
		ToggleLineChartWithDatasets(bpmDataset);
		StartLiveData();
	}
	private void ToggleSteps()
	{
		hideLineChart = false;
		hidePieChart = true;
		ToggleLineChartWithDatasets(otherDataSet);
		StopLiveData();
	}
	private void ToggleLineChartWithDatasets(params LineDataset<TimePoint>[] datasetsToShow)
	{
		hideLineChart = false;
		hidePieChart = true;

		_LineChartConfig.Data.Datasets.Clear();
		foreach (var dataset in datasetsToShow)
		{
			_LineChartConfig.Data.Datasets.Add(dataset);
		}

		StateHasChanged(); // Refresh UI

	}

	private void ConfigurePieConfig()
	{
		hidePieChart = true;
		_pieConfig.Options = new PieOptions
			{
				Responsive = true,
				Title = new OptionsTitle
				{
					Display = true,
					Text = "sample"
				}
			};
		foreach(var party in new[] {"Party1", "Party2", "Party3" })
		{
			_pieConfig.Data.Labels.Add(party);
		}
		var dataset = new PieDataset<int>(new[] { 15, 30, 45 })
			{
				BackgroundColor = new[]
				{
				ColorUtil.ColorHexString(255,0,0),
				ColorUtil.ColorHexString(0,255,0),
				ColorUtil.ColorHexString(0,0,255)
			}
		};
		_pieConfig.Data.Datasets.Add(dataset);
	}
	private void ConfigureLineConfig()
	{
		hideLineChart = true;
		_LineChartConfig.Options = new LineOptions
			{
				Responsive = true,
				Title = new OptionsTitle
				{
					Display = true,
					Text = "User BPM Over Time"
				},
				Scales = new Scales
				{
					XAxes = new List<CartesianAxis>
				{
					new TimeAxis
					{
						Time = new TimeOptions
						{
							Unit = TimeMeasurement.Minute,
							// Change to Hour/Minute if needed
						},
						ScaleLabel = new ScaleLabel
						{
							Display = true,
							LabelString = "Time"
						}
					}
				},
					YAxes = new List<CartesianAxis>
				{
					new LinearCartesianAxis
					{
						Ticks = new LinearCartesianTicks
						{
							BeginAtZero = true
						},
						ScaleLabel = new ScaleLabel
						{
							Display = true,
							LabelString = "BPM"
						}
					}
				}
				}
			};

		// Example data points
		bpmDataset = new LineDataset<TimePoint>
			{
				Label = "Live BPM",
				BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
				BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
				Fill = false
			};
		stepsDataset = new LineDataset<TimePoint>
			{
				Label = "Steps",
				BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Blue),
				BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Blue),
				Fill = false
			};
		otherDataSet = new LineDataset<TimePoint>
			{
				Label = "Steps",
				BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Orange),
				BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Orange),
				Fill = false
			};

		otherDataSet.AddRange(new[]
			{
				new TimePoint(new DateTime(2025, 5, 1), 12000),
				new TimePoint(new DateTime(2025, 5, 5), 15000),
				new TimePoint(new DateTime(2025, 5, 15), 8000),
				new TimePoint(new DateTime(2025, 5,20), 17050)
			});

		_LineChartConfig.Data.Datasets.Clear();
		_LineChartConfig.Data.Labels.Clear();
		_LineChartConfig.Data.Datasets.Add(bpmDataset);
	}
	private void StartLiveData()
	{
		if (updateTimer != null)
			return;

		updateTimer = new Timer(1000); // 1 second
		updateTimer.Elapsed += async (s, e) => await AddLivePointAsync();
		updateTimer.AutoReset = true;
		updateTimer.Start();
	}
	private void StopLiveData()
	{
		if (updateTimer != null)
		{
			updateTimer.Stop();
			updateTimer.Dispose();
			updateTimer = null;
		}
	}

	private async Task AddLivePointAsync()
	{
		// Simulate getting a value
		int bpm = rand.Next(60, 100);
		var time = DateTime.Now;

		var newPoint = new TimePoint(time, bpm);
		bpmDataQueue.Enqueue(newPoint);

		if (bpmDataQueue.Count > 30)
			bpmDataQueue.Dequeue();

		await InvokeAsync(() =>
		{
			bpmDataset.Clear();
			bpmDataset.AddRange(bpmDataQueue);

			_LineChartConfig.Data.Labels.Clear(); // if needed
			StateHasChanged();
		});
	}

}
